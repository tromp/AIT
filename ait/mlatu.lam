-- These definitions translate mlatu-6 programs into corresponding lambda terms
-- which provides a semantics for mlatu-6
-- and allows proving program equality by beta or beta/eta equivalence
-- Concatenation of programs becomes composition of functions,
-- with the empty concatenation being the identity function.
-- Also see https://esolangs.org/wiki/Mlatu-6
-- This follows https://esolangs.org/wiki/Underload#Converting_Underload_to_lambda_calculus
-- but with the rule for cat fixed to [*F] cont = \x\y. [F] cont (\c. y (x c))

let
  id    = \x. x;
  false = \_. id;
  o     = \x\y\c. x (y c);	-- compose
  tup   = \x\y. y x;		-- 1-tuple
  empty = tup id;

  dup   = \c\x. c x x;					-- +       (A) -> (A) (A)
  zap   = \c\x. c;					-- -       (A) ->
  unqot = \c\x. x c;					-- <       (A) -> A
  quote = \c\x. c (tup x);				-- >       (A) -> ((A))
  cat   = \c\x\y. c (\c. y (x c));			-- ,   (A) (B) -> (A B)
  swap  = \c\x\y. c y x;				-- ~   (A) (B) -> (B) (A)

  -- +- ==
  dupzap = o dup zap;		-- dupzap =beta= \x\y. x y =eta= id
  -- >< ==
  quoteunqot = o quote unqot;	-- quoteunqot =beta= \x\y. x y =eta= id
  -- ~~ ==
  swapswap = o swap swap;	-- swapswap =beta= \x\y\z. x y z =eta= id
  -- (), ==
  emptycat = o empty cat;	-- emptycat =beta/eta= \x\y.x (\z.y z) =eta= id
  -- +~ == +
  dupswap = o dup swap;		-- dupswap =beta= dup
  -- >- == -
  quotezap = o quote zap;	-- quotezap  =beta= zap
  -- -- == ,- == ~-- == ~,-
  zapzap = o zap zap;
  catzap = o cat zap;
  swapzapzap = o swap zapzap;
  swapcatzap = o swap catzap;	-- zapzap =beta= catzap =beta= swapzapzap =beta= swapcatzap
  -- +>~ == >+<
  dupquoteswap = o (o dup quote) swap;
  quotedupunqot = o (o quote dup) unqot;	-- dupquoteswap =beta= quotedupunqot
  -- +>~> == >+<> == >+
  dupquoteswapquote = o dup (o quote (o swap quote));
  quotedupunqotquote = o quote (o dup (o unqot quote));
  quotedup = o quote dup;	-- dupquoteswapquote =beta= quotedupunqotquote =beta= quotedup
  -- >,<< == ,<
  quotecatunqotunqot = o quote (o cat (o unqot unqot));
  catunqot = o cat unqot;	-- quotecatunqotunqot =beta= catunqot

  -- size 9 busy beaver candidate (+,+)+<<<
  dupcatdup = o dup (o cat dup);
  busybeaver = o (tup dupcatdup) (o dup (o unqot (o unqot unqot)));

in busybeaver
