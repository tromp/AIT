-- See https://googology.fandom.com/wiki/Church-Kleene_ordinal for more
let
  -- Church numerals, corresponding to Church encoding of
  -- data Nat = Succ Nat | Zero
  -- type: N = forall r. (r -> r) -> r -> r
  CZero = \f\x. x;
  Csucc = \n.\f\x. f (n f x);
  C0 = CZero;      -- size 6
  C1 = Csucc C0;   -- size 4
  C2 = \s\z.s(s z);   -- size 16
  C3 = \s\z.s(s(s z));   -- size 21
  C4 = \s\z.s(s(s(s z)));   -- size 26
  C5 = \s\z.s(s(s(s(s z))));   -- size 31
  C6 = \s\z.s(s(s(s(s(s z)))));   -- size 36
  C7 = \s\z.s(s(s(s(s(s(s z))))));   -- size 41
  C8 = \s\z.s(s(s(s(s(s(s(s z)))))));   -- size 46
  C9 = \s\z.s(s(s(s(s(s(s(s(s z))))))));   -- size 51
  C10 = \s\z.s(s(s(s(s(s(s(s(s(s z)))))))));  -- size 56

  -- Kleene ordinals, corresponding to Church encoding of
  -- data Ord = Lim (Nat -> Ord) | Succ Ord | Zero
  -- type: forall r. ((N -> r) -> r) -> (r -> r) -> r -> r
  Zero =    \l\s\z.            z     ; -- ordinal 0
  Succ = \n.\l\s\z.       s (n l s z); -- successor ordinal n+1
  Lim  = \f.\l\s\z. l (\n. f n l s z); -- limit ordinal sup { f C0, f C1, f C2, ... }

  -- The set K of ordinal notations is defined inductively by
  -- Zero is in K
  -- if n is in K, then Succ n is in K
  -- if f Cn is in K for all Church numerals Cn, then Lim f is in K

  O0 = Zero;                 -- size 8
  O1 = \l.C1;                -- size 6
  O2 = \l\s\z.s(s z);        -- size 18
  O3 = \l\s\z.s(s(s z));     -- size 23
  -- limit ordinal sup { O0, O1, O2, ... }
  Ow = Lim (\n\l\s\z.n s z); -- size 27 -- reduces to \l\s\z. l (\n.n s z);
  O4 = \l.C4;                -- size 28
  Ow1 = Succ Ow;             -- size 32
  O5 = \l.C5;                -- size 33
  O6 = \l.C7;                -- size 38
  O7 = \l.C7;                -- size 43
  O8 = \l.C8;                -- size 48
  O9 = \l.C9;                -- size 53
  O10 = \l.C10;              -- size 58

  -- arithmetic
  add  = \n\m. m Lim Succ n;             -- size 92
  -- add n Zero = Zero Lim Succ n = n
  -- add n (Succ m) = Succ m Lim Succ n
  --               = Succ (m Lim Succ n) = Succ (add n m)
  -- add n (Lim f) = Lim f Lim Succ n
  --        = Lim (\i. f i Lim Succ n) = Lim (\i. add n (f i))
  -- add with arguments flipped
  addf = \m\n. add n m;                  -- size 85
  mul  = \n\m. m Lim (\x. add x n) Zero; -- size 116 -- whereas equivalent (add n) has size 124
  -- mul n Zero = Zero Lim (\x. add x n) Zero = Zero
  -- mul n (Succ m) = Succ m Lim (\x. add x n) Zero
  --      = (\x. add x n) (m Lim (\x. add x n) Zero)
  --                = add (m Lim (\x. add x n) Zero) n = add (mul n m) n
  -- mul n (Lim f) = Lim f Lim (\x. add x n) Zero
  --        = Lim (\i. f i Lim (\x. add x n) Zero) = Lim (\i. mul n (f i))
  -- mul O2 Ow
  -- = Ow Lim (\x. add x O2) Zero
  -- = Lim (\n\l\s\z.n s z) Lim (\x. add x O2) Zero
  -- = (\l\s\z. l (\n. (\n\l\s\z.n s z) n l s z)) Lim (\x. add x O2) Zero
  -- = (\l\s\z. l (\n. n s z)) Lim (\x. add x O2) Zero
  -- = (\s\z. Lim (\n. n s z)) (\x. add x O2) Zero
  -- = (\z. Lim (\n. n (\x. add x O2) z))  Zero
  -- = Lim (\n. n (\x. add x O2) Zero)
  -- mul Ow O2
  -- = O2 Lim (\x. add x Ow) Zero
  -- = (\l\s\z.s(s z)) Lim (\x. add x Ow) Zero
  -- = add (add Zero Ow) Ow
  expw = \n. n Lim (\x. mul x Ow) O1;    -- size 143
  -- expw Zero = Zero Lim (\x. mul x Ow) O1 = O1
  -- expw (Succ n) = Succ n Lim (\x. mul x Ow) O1
  --    = (\x. mul x Ow) (n Lim (\x. mul x Ow) O1)
  --               = mul (n Lim (\x. mul x Ow) O1) Ow = mul (expw n) Ow
  -- expw (Lim f) = Lim f Lim (\x. mul x Ow) O1
  --       = Lim (\i. f i Lim (\x. mul x Ow) O1) = Lim (\i. expw (f i))


  -- extract fundamental sequence
  True = \x\y.x;
  False = \x\y.y;
  cons = \x\y\z.z x y;
  fst = \x. x True;
  snd = \x. x False;
  funseq = \o\ci. snd (o         -- 185 bits
      (\f. cons (Lim (\n. fst (f n))) (fst (f ci)))
      (\p. let sfp = (Succ (fst p)) in cons sfp sfp)
      (cons Zero Zero));

  Ow2      = add Ow Ow;                       -- size 109  w * 2
  Oww      = expw Ow;                         -- size 146  w^w
  Oeps0    = Lim (\n. n expw O0);             -- size 167  epsilon_0
  OepsSucc = \e. Lim (\n. n expw (Succ e));   -- size 187  epsilon_i -> epsilon_i+1

  iter = \f\n. n f n;             -- iterate
  diag = \f\n. f n n;             -- diagonalize

  -- Fast Growing Hierarchy
  -- type: O -> N -> N
  fgh = \a. a
              diag                -- f_a   n = f_a_n n
              iter                -- f_a+1 n = n f_a n
              Csucc;              -- f_0   n = n+1
  -- fgh (Lim f) n  = Lim f diag iter Csucc n =
  -- (\f\n. f n n) (\i. f i diag iter Csucc) n
  --  = f n diag iter Csucc n = fgh (f n) n

  -- Hardy Hierarchy
  -- type: O -> N -> N
  hh = \a. a
              diag                -- h_a   n = h_a_n n
              (\f\n. f (Csucc n)) -- h_a+1 n = h_a (n+1)
              C1;                 -- h_0   n = n

  -- Middle Growing Hierarchy
  -- type: O -> N -> N
  mgh = \a. a
              diag                -- m_a   n = m_a_n n
              (\f\n. f (f n))     -- m_a+1 n = m_a (m_a n)
              Csucc;              -- m_0   n = n+1

  -- Slow Growing Hierarchy
  -- type: O -> N -> N
  sgh = \a. a
              diag                -- s_a   n = s_a_n n
              (\f\n. f (f n))     -- s_a+1 n = s_a (m_a n)
              Csucc;              -- s_0   n = n+1

  -- Fundamental sequence for w1CK
  -- w1CKi is the BLC-lexicographically-minimal ordinal exceeding all w1CKj for j < i
  -- similar to a Busy Beaver for ordinals
  -- Conjectured first 12 elements:
  w1CK0 = O1;  -- size 6
  w1CK1 = O2;  -- size 18
  w1CK2 = O3;  -- size 23
  w1CK3 = Ow;  -- size 27
  w1CK4 = O4;  -- size 28
  w1CK5 = Ow1; -- size 32
  w1CK6 = O5;  -- size 33
  w1CK7 = O6;  -- size 38
  w1CK8 = O7;  -- size 43
  w1CK9 = O8;  -- size 48
  w1CK10 = O9; -- size 53
  w1CK11 = O10;-- size 58
in fgh Oeps0
